// Generated by Flexc++ V0.98.00 on Sun, 06 Oct 2013 22:49:41 +0100

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "scannerbase.h"

#include <string>
#include <exception>

class ScannerException: public std::exception {
  private:
	std::string msg;

  public:
	ScannerException(): msg("unknown error") {}
	ScannerException(std::string msg_): msg("scanner: "+msg_) {}
	const char *what() const throw() { return msg.c_str(); }
};

// $insert classHead
class Scanner: public ScannerBase
{
    public:
	    // Non-zero value indicates that we return that as custom
	    // start token to the parser in the first call of lex().
        int parserStart;

        explicit Scanner(std::istream &in = std::cin,
                         std::ostream &out = std::cout);

        Scanner(std::string const &infile, std::string const &outfile);

        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must
                            // be exec'ed before the patternmatching starts

#if ( FLEXCPP_VERSION >= 10800LL )
        void postCode(PostEnum__ type);
                            // re-implement this function for code that must
                            // be exec'ed after the rules's actions.
#endif
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out), parserStart(0)
{}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile)
:
    ScannerBase(infile, outfile), parserStart(0)
{}

// $insert inlineLexFunction
inline int Scanner::lex()
{
	if ( parserStart!=0 ) {
		int res = parserStart;
		parserStart = 0;
		return res;
	}
    return lex__();
}

inline void Scanner::preCode()
{
    // optionally replace by your own code
}

#if ( FLEXCPP_VERSION >= 10800LL )
inline void Scanner::postCode(PostEnum__ type)
{
    // optionally replace by your own code
}
#endif

inline void Scanner::print()
{
    print__();
}


#endif // Scanner_H_INCLUDED_

